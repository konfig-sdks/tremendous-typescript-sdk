/* tslint:disable */
/* eslint-disable */
/*
API Endpoints

Deliver monetary rewards and incentives to employees, customers, survey participants, and more through the Tremendous API. For organizational tasks, like managing your organization and it's members within Tremendous, please see the Tremendous Organizational API.

The version of the OpenAPI document: 2
Contact: developers@tremendous.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { WebhooksCreateWebhook400Response } from '../models';
// @ts-ignore
import { WebhooksCreateWebhook401Response } from '../models';
// @ts-ignore
import { WebhooksCreateWebhook429Response } from '../models';
// @ts-ignore
import { WebhooksCreateWebhook500Response } from '../models';
// @ts-ignore
import { WebhooksCreateWebhookRequest } from '../models';
// @ts-ignore
import { WebhooksCreateWebhookResponse } from '../models';
// @ts-ignore
import { WebhooksGetDetails200Response } from '../models';
// @ts-ignore
import { WebhooksGetDetails401Response } from '../models';
// @ts-ignore
import { WebhooksGetDetails404Response } from '../models';
// @ts-ignore
import { WebhooksGetDetails429Response } from '../models';
// @ts-ignore
import { WebhooksGetDetails500Response } from '../models';
// @ts-ignore
import { WebhooksGetDetailsResponse } from '../models';
// @ts-ignore
import { WebhooksListEvents401Response } from '../models';
// @ts-ignore
import { WebhooksListEvents404Response } from '../models';
// @ts-ignore
import { WebhooksListEvents429Response } from '../models';
// @ts-ignore
import { WebhooksListEvents500Response } from '../models';
// @ts-ignore
import { WebhooksListEventsResponse } from '../models';
// @ts-ignore
import { WebhooksTriggerEvent401Response } from '../models';
// @ts-ignore
import { WebhooksTriggerEvent404Response } from '../models';
// @ts-ignore
import { WebhooksTriggerEvent422Response } from '../models';
// @ts-ignore
import { WebhooksTriggerEvent429Response } from '../models';
// @ts-ignore
import { WebhooksTriggerEvent500Response } from '../models';
// @ts-ignore
import { WebhooksTriggerEventRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * WebhooksApi - axios parameter creator
 * @export
 */
export const WebhooksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Tremendous uses webhooks as a notification system for various events that happen in your account.  > ðŸ“˜ Learn more about Webhooks > > Our guide explains everything you need to know about the Tremendous webhooks: > [Read it here](https://developers.tremendous.com/)  Every organization can define a single webhook endpoint where we send requests to, whenever an event happens.  This endpoint allows you to setup that endpoint. The URL of the endpoint can be changed by making a request to this endpoint again with the new URL.  ## Request body  <div class=\"object-schema-request-schema\">   <table>   <thead>     <tr>       <th>Property</th>       <th>Type</th>       <th>Description</th>     </tr>   </thead>   <tbody class=\"object-schema-table-body\">     <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">url</code> </div> </td><td><span class=\"property-type\">string</span> <span class=\"property-format\">uri</span></td><td><p>URL the webhook will make requests to</p> </td></tr>   </tbody> </table>  </div>  
         * @summary Create webhook
         * @param {WebhooksCreateWebhookRequest} webhooksCreateWebhookRequest Webhook details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWebhook: async (webhooksCreateWebhookRequest: WebhooksCreateWebhookRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webhooksCreateWebhookRequest' is not null or undefined
            assertParamExists('createWebhook', 'webhooksCreateWebhookRequest', webhooksCreateWebhookRequest)
            const localVarPath = `/webhooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webhooksCreateWebhookRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webhooks',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webhooksCreateWebhookRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Every organization can only have one webhook. This endpoint shows the details about that webhook.  > ðŸ“˜ Learn more about Webhooks > > Our guide explains everything you need to know about the Tremendous webhooks: > [Read it here](https://developers.tremendous.com/) 
         * @summary List webhooks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/webhooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webhooks',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * > ðŸ“˜ Learn more about Webhooks > > Our guide explains everything you need to know about the Tremendous webhooks: > [Read it here](https://developers.tremendous.com/) 
         * @summary Retrieve webhook
         * @param {string} id ID of the webhook to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails_1: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDetails_1', 'id', id)
            const localVarPath = `/webhooks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webhooks/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all event types that can be sent to the configured webhook endpoint.  > ðŸ“˜ Learn more about Webhooks > > Our guide explains everything you need to know about the Tremendous webhooks: > [Read it here](https://developers.tremendous.com/) 
         * @summary List events
         * @param {string} id ID of the webhook to list the events for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEvents: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listEvents', 'id', id)
            const localVarPath = `/webhooks/{id}/events`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webhooks/{id}/events',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Making a request to this endpoint will cause our system to trigger a webhook for the specified event. This can be very useful when testing the setup that processes webhooks on your end.  > ðŸ“˜ Learn more about Webhooks > > Our guide explains everything you need to know about the Tremendous webhooks: > [Read it here](https://developers.tremendous.com/) 
         * @summary Test webhook
         * @param {string} id ID of the webhook to test
         * @param {WebhooksTriggerEventRequest} webhooksTriggerEventRequest Webhook details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerEvent: async (id: string, webhooksTriggerEventRequest: WebhooksTriggerEventRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('triggerEvent', 'id', id)
            // verify required parameter 'webhooksTriggerEventRequest' is not null or undefined
            assertParamExists('triggerEvent', 'webhooksTriggerEventRequest', webhooksTriggerEventRequest)
            const localVarPath = `/webhooks/{id}/simulate`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webhooksTriggerEventRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webhooks/{id}/simulate',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webhooksTriggerEventRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebhooksApi - functional programming interface
 * @export
 */
export const WebhooksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebhooksApiAxiosParamCreator(configuration)
    return {
        /**
         * Tremendous uses webhooks as a notification system for various events that happen in your account.  > ðŸ“˜ Learn more about Webhooks > > Our guide explains everything you need to know about the Tremendous webhooks: > [Read it here](https://developers.tremendous.com/)  Every organization can define a single webhook endpoint where we send requests to, whenever an event happens.  This endpoint allows you to setup that endpoint. The URL of the endpoint can be changed by making a request to this endpoint again with the new URL.  ## Request body  <div class=\"object-schema-request-schema\">   <table>   <thead>     <tr>       <th>Property</th>       <th>Type</th>       <th>Description</th>     </tr>   </thead>   <tbody class=\"object-schema-table-body\">     <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">url</code> </div> </td><td><span class=\"property-type\">string</span> <span class=\"property-format\">uri</span></td><td><p>URL the webhook will make requests to</p> </td></tr>   </tbody> </table>  </div>  
         * @summary Create webhook
         * @param {WebhooksApiCreateWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWebhook(requestParameters: WebhooksApiCreateWebhookRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhooksCreateWebhookResponse>> {
            const webhooksCreateWebhookRequest: WebhooksCreateWebhookRequest = {
                url: requestParameters.url
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWebhook(webhooksCreateWebhookRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Every organization can only have one webhook. This endpoint shows the details about that webhook.  > ðŸ“˜ Learn more about Webhooks > > Our guide explains everything you need to know about the Tremendous webhooks: > [Read it here](https://developers.tremendous.com/) 
         * @summary List webhooks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetails(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhooksGetDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetails(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * > ðŸ“˜ Learn more about Webhooks > > Our guide explains everything you need to know about the Tremendous webhooks: > [Read it here](https://developers.tremendous.com/) 
         * @summary Retrieve webhook
         * @param {WebhooksApiGetDetails0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetails_1(requestParameters: WebhooksApiGetDetails0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhooksGetDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetails_1(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists all event types that can be sent to the configured webhook endpoint.  > ðŸ“˜ Learn more about Webhooks > > Our guide explains everything you need to know about the Tremendous webhooks: > [Read it here](https://developers.tremendous.com/) 
         * @summary List events
         * @param {WebhooksApiListEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEvents(requestParameters: WebhooksApiListEventsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhooksListEventsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEvents(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Making a request to this endpoint will cause our system to trigger a webhook for the specified event. This can be very useful when testing the setup that processes webhooks on your end.  > ðŸ“˜ Learn more about Webhooks > > Our guide explains everything you need to know about the Tremendous webhooks: > [Read it here](https://developers.tremendous.com/) 
         * @summary Test webhook
         * @param {WebhooksApiTriggerEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async triggerEvent(requestParameters: WebhooksApiTriggerEventRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const webhooksTriggerEventRequest: WebhooksTriggerEventRequest = {
                event: requestParameters.event
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.triggerEvent(requestParameters.id, webhooksTriggerEventRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WebhooksApi - factory interface
 * @export
 */
export const WebhooksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebhooksApiFp(configuration)
    return {
        /**
         * Tremendous uses webhooks as a notification system for various events that happen in your account.  > ðŸ“˜ Learn more about Webhooks > > Our guide explains everything you need to know about the Tremendous webhooks: > [Read it here](https://developers.tremendous.com/)  Every organization can define a single webhook endpoint where we send requests to, whenever an event happens.  This endpoint allows you to setup that endpoint. The URL of the endpoint can be changed by making a request to this endpoint again with the new URL.  ## Request body  <div class=\"object-schema-request-schema\">   <table>   <thead>     <tr>       <th>Property</th>       <th>Type</th>       <th>Description</th>     </tr>   </thead>   <tbody class=\"object-schema-table-body\">     <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">url</code> </div> </td><td><span class=\"property-type\">string</span> <span class=\"property-format\">uri</span></td><td><p>URL the webhook will make requests to</p> </td></tr>   </tbody> </table>  </div>  
         * @summary Create webhook
         * @param {WebhooksApiCreateWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWebhook(requestParameters: WebhooksApiCreateWebhookRequest, options?: AxiosRequestConfig): AxiosPromise<WebhooksCreateWebhookResponse> {
            return localVarFp.createWebhook(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Every organization can only have one webhook. This endpoint shows the details about that webhook.  > ðŸ“˜ Learn more about Webhooks > > Our guide explains everything you need to know about the Tremendous webhooks: > [Read it here](https://developers.tremendous.com/) 
         * @summary List webhooks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails(options?: AxiosRequestConfig): AxiosPromise<WebhooksGetDetailsResponse> {
            return localVarFp.getDetails(options).then((request) => request(axios, basePath));
        },
        /**
         * > ðŸ“˜ Learn more about Webhooks > > Our guide explains everything you need to know about the Tremendous webhooks: > [Read it here](https://developers.tremendous.com/) 
         * @summary Retrieve webhook
         * @param {WebhooksApiGetDetails0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails_1(requestParameters: WebhooksApiGetDetails0Request, options?: AxiosRequestConfig): AxiosPromise<WebhooksGetDetails200Response> {
            return localVarFp.getDetails_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists all event types that can be sent to the configured webhook endpoint.  > ðŸ“˜ Learn more about Webhooks > > Our guide explains everything you need to know about the Tremendous webhooks: > [Read it here](https://developers.tremendous.com/) 
         * @summary List events
         * @param {WebhooksApiListEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEvents(requestParameters: WebhooksApiListEventsRequest, options?: AxiosRequestConfig): AxiosPromise<WebhooksListEventsResponse> {
            return localVarFp.listEvents(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Making a request to this endpoint will cause our system to trigger a webhook for the specified event. This can be very useful when testing the setup that processes webhooks on your end.  > ðŸ“˜ Learn more about Webhooks > > Our guide explains everything you need to know about the Tremendous webhooks: > [Read it here](https://developers.tremendous.com/) 
         * @summary Test webhook
         * @param {WebhooksApiTriggerEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerEvent(requestParameters: WebhooksApiTriggerEventRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.triggerEvent(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createWebhook operation in WebhooksApi.
 * @export
 * @interface WebhooksApiCreateWebhookRequest
 */
export type WebhooksApiCreateWebhookRequest = {
    
} & WebhooksCreateWebhookRequest

/**
 * Request parameters for getDetails_1 operation in WebhooksApi.
 * @export
 * @interface WebhooksApiGetDetails0Request
 */
export type WebhooksApiGetDetails0Request = {
    
    /**
    * ID of the webhook to retrieve
    * @type {string}
    * @memberof WebhooksApiGetDetails0
    */
    readonly id: string
    
}

/**
 * Request parameters for listEvents operation in WebhooksApi.
 * @export
 * @interface WebhooksApiListEventsRequest
 */
export type WebhooksApiListEventsRequest = {
    
    /**
    * ID of the webhook to list the events for
    * @type {string}
    * @memberof WebhooksApiListEvents
    */
    readonly id: string
    
}

/**
 * Request parameters for triggerEvent operation in WebhooksApi.
 * @export
 * @interface WebhooksApiTriggerEventRequest
 */
export type WebhooksApiTriggerEventRequest = {
    
    /**
    * ID of the webhook to test
    * @type {string}
    * @memberof WebhooksApiTriggerEvent
    */
    readonly id: string
    
} & WebhooksTriggerEventRequest

/**
 * WebhooksApiGenerated - object-oriented interface
 * @export
 * @class WebhooksApiGenerated
 * @extends {BaseAPI}
 */
export class WebhooksApiGenerated extends BaseAPI {
    /**
     * Tremendous uses webhooks as a notification system for various events that happen in your account.  > ðŸ“˜ Learn more about Webhooks > > Our guide explains everything you need to know about the Tremendous webhooks: > [Read it here](https://developers.tremendous.com/)  Every organization can define a single webhook endpoint where we send requests to, whenever an event happens.  This endpoint allows you to setup that endpoint. The URL of the endpoint can be changed by making a request to this endpoint again with the new URL.  ## Request body  <div class=\"object-schema-request-schema\">   <table>   <thead>     <tr>       <th>Property</th>       <th>Type</th>       <th>Description</th>     </tr>   </thead>   <tbody class=\"object-schema-table-body\">     <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">url</code> </div> </td><td><span class=\"property-type\">string</span> <span class=\"property-format\">uri</span></td><td><p>URL the webhook will make requests to</p> </td></tr>   </tbody> </table>  </div>  
     * @summary Create webhook
     * @param {WebhooksApiCreateWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiGenerated
     */
    public createWebhook(requestParameters: WebhooksApiCreateWebhookRequest, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).createWebhook(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Every organization can only have one webhook. This endpoint shows the details about that webhook.  > ðŸ“˜ Learn more about Webhooks > > Our guide explains everything you need to know about the Tremendous webhooks: > [Read it here](https://developers.tremendous.com/) 
     * @summary List webhooks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiGenerated
     */
    public getDetails(options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).getDetails(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * > ðŸ“˜ Learn more about Webhooks > > Our guide explains everything you need to know about the Tremendous webhooks: > [Read it here](https://developers.tremendous.com/) 
     * @summary Retrieve webhook
     * @param {WebhooksApiGetDetails0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiGenerated
     */
    public getDetails_1(requestParameters: WebhooksApiGetDetails0Request, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).getDetails_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists all event types that can be sent to the configured webhook endpoint.  > ðŸ“˜ Learn more about Webhooks > > Our guide explains everything you need to know about the Tremendous webhooks: > [Read it here](https://developers.tremendous.com/) 
     * @summary List events
     * @param {WebhooksApiListEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiGenerated
     */
    public listEvents(requestParameters: WebhooksApiListEventsRequest, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).listEvents(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Making a request to this endpoint will cause our system to trigger a webhook for the specified event. This can be very useful when testing the setup that processes webhooks on your end.  > ðŸ“˜ Learn more about Webhooks > > Our guide explains everything you need to know about the Tremendous webhooks: > [Read it here](https://developers.tremendous.com/) 
     * @summary Test webhook
     * @param {WebhooksApiTriggerEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiGenerated
     */
    public triggerEvent(requestParameters: WebhooksApiTriggerEventRequest, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).triggerEvent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
