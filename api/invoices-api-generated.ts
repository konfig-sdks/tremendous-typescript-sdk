/* tslint:disable */
/* eslint-disable */
/*
API Endpoints

Deliver monetary rewards and incentives to employees, customers, survey participants, and more through the Tremendous API. For organizational tasks, like managing your organization and it's members within Tremendous, please see the Tremendous Organizational API.

The version of the OpenAPI document: 2
Contact: developers@tremendous.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { InvoicesCreateAndFundAccountBalance400Response } from '../models';
// @ts-ignore
import { InvoicesCreateAndFundAccountBalance401Response } from '../models';
// @ts-ignore
import { InvoicesCreateAndFundAccountBalance429Response } from '../models';
// @ts-ignore
import { InvoicesCreateAndFundAccountBalance500Response } from '../models';
// @ts-ignore
import { InvoicesCreateAndFundAccountBalanceRequest } from '../models';
// @ts-ignore
import { InvoicesCreateAndFundAccountBalanceResponse } from '../models';
// @ts-ignore
import { InvoicesGetAll401Response } from '../models';
// @ts-ignore
import { InvoicesGetAll429Response } from '../models';
// @ts-ignore
import { InvoicesGetAll500Response } from '../models';
// @ts-ignore
import { InvoicesGetAllResponse } from '../models';
// @ts-ignore
import { InvoicesGetById401Response } from '../models';
// @ts-ignore
import { InvoicesGetById404Response } from '../models';
// @ts-ignore
import { InvoicesGetById429Response } from '../models';
// @ts-ignore
import { InvoicesGetById500Response } from '../models';
// @ts-ignore
import { InvoicesGetByIdResponse } from '../models';
// @ts-ignore
import { InvoicesGetCsv400Response } from '../models';
// @ts-ignore
import { InvoicesGetCsv401Response } from '../models';
// @ts-ignore
import { InvoicesGetCsv404Response } from '../models';
// @ts-ignore
import { InvoicesGetCsv429Response } from '../models';
// @ts-ignore
import { InvoicesGetCsv500Response } from '../models';
// @ts-ignore
import { InvoicesGetPdf401Response } from '../models';
// @ts-ignore
import { InvoicesGetPdf404Response } from '../models';
// @ts-ignore
import { InvoicesGetPdf429Response } from '../models';
// @ts-ignore
import { InvoicesGetPdf500Response } from '../models';
// @ts-ignore
import { InvoicesRemoveInvoice401Response } from '../models';
// @ts-ignore
import { InvoicesRemoveInvoice404Response } from '../models';
// @ts-ignore
import { InvoicesRemoveInvoice429Response } from '../models';
// @ts-ignore
import { InvoicesRemoveInvoice500Response } from '../models';
// @ts-ignore
import { InvoicesRemoveInvoiceResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * InvoicesApi - axios parameter creator
 * @export
 */
export const InvoicesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creating an invoice is the way for your organization to fund your account\'s balance.  1. Create an invoice 2. Pay the invoice 3. Funds get added to your account\'s balance  ## Request body  <div class=\"object-schema-request-schema\">   <table>   <thead>     <tr>       <th>Property</th>       <th>Type</th>       <th>Description</th>     </tr>   </thead>   <tbody class=\"object-schema-table-body\">     <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">po_number</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Reference to the purchase order number within your organization</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">amount</code> </div> </td><td><span class=\"property-type\">number</span> <span class=\"property-format\">double</span></td><td><p>Amount of the invoice in USD</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">memo</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>A note to be included in the invoice. This is for your internal use and will not be visible to the recipient.</p> </td></tr>   </tbody> </table>  </div>  
         * @summary Create invoice
         * @param {InvoicesCreateAndFundAccountBalanceRequest} invoicesCreateAndFundAccountBalanceRequest Invoice details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndFundAccountBalance: async (invoicesCreateAndFundAccountBalanceRequest: InvoicesCreateAndFundAccountBalanceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'invoicesCreateAndFundAccountBalanceRequest' is not null or undefined
            assertParamExists('createAndFundAccountBalance', 'invoicesCreateAndFundAccountBalanceRequest', invoicesCreateAndFundAccountBalanceRequest)
            const localVarPath = `/invoices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: invoicesCreateAndFundAccountBalanceRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/invoices',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(invoicesCreateAndFundAccountBalanceRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a list of all invoices on your account.  > ðŸš§ Deleted invoices are omitted > > The response does not include any previously deleted invoices. 
         * @summary List invoices
         * @param {number} [offset] Offsets the returned list by the given number of invoices. The returned invoices are ordered (and offsetted) by their creation date (DESC).
         * @param {number} [limit] Limits the number of invoices listed. The maximum and default value is 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll: async (offset?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/invoices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/invoices',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve an invoice, identified by the given `id` in the URL  > ðŸ“˜ Deleted Invoices > > This endpoint can be used to retrieve details on deleted invoices > that the list of invoices omits. 
         * @summary Retrieve invoice
         * @param {string} id ID of the invoice that should be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById', 'id', id)
            const localVarPath = `/invoices/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/invoices/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generates a CSV version for an invoice listing the associated rewards and orders 
         * @summary Retrieve invoice as CSV
         * @param {string} id ID of the Invoice for that the CSV should be generated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCsv: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCsv', 'id', id)
            const localVarPath = `/invoices/{id}/csv`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/invoices/{id}/csv',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generates a PDF version for an invoice 
         * @summary Retrieve invoice as PDF
         * @param {string} id ID of the Invoice for that the PDF should be generated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPdf: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPdf', 'id', id)
            const localVarPath = `/invoices/{id}/pdf`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/invoices/{id}/pdf',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes an invoice. This has no further consequences but is a rather cosmetic operation. 
         * @summary Delete invoice
         * @param {string} id ID of the invoice that should be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeInvoice: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('removeInvoice', 'id', id)
            const localVarPath = `/invoices/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/invoices/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InvoicesApi - functional programming interface
 * @export
 */
export const InvoicesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InvoicesApiAxiosParamCreator(configuration)
    return {
        /**
         * Creating an invoice is the way for your organization to fund your account\'s balance.  1. Create an invoice 2. Pay the invoice 3. Funds get added to your account\'s balance  ## Request body  <div class=\"object-schema-request-schema\">   <table>   <thead>     <tr>       <th>Property</th>       <th>Type</th>       <th>Description</th>     </tr>   </thead>   <tbody class=\"object-schema-table-body\">     <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">po_number</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Reference to the purchase order number within your organization</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">amount</code> </div> </td><td><span class=\"property-type\">number</span> <span class=\"property-format\">double</span></td><td><p>Amount of the invoice in USD</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">memo</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>A note to be included in the invoice. This is for your internal use and will not be visible to the recipient.</p> </td></tr>   </tbody> </table>  </div>  
         * @summary Create invoice
         * @param {InvoicesApiCreateAndFundAccountBalanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAndFundAccountBalance(requestParameters: InvoicesApiCreateAndFundAccountBalanceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvoicesCreateAndFundAccountBalanceResponse>> {
            const invoicesCreateAndFundAccountBalanceRequest: InvoicesCreateAndFundAccountBalanceRequest = {
                po_number: requestParameters.po_number,
                amount: requestParameters.amount,
                memo: requestParameters.memo
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAndFundAccountBalance(invoicesCreateAndFundAccountBalanceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch a list of all invoices on your account.  > ðŸš§ Deleted invoices are omitted > > The response does not include any previously deleted invoices. 
         * @summary List invoices
         * @param {InvoicesApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll(requestParameters: InvoicesApiGetAllRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvoicesGetAllResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll(requestParameters.offset, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve an invoice, identified by the given `id` in the URL  > ðŸ“˜ Deleted Invoices > > This endpoint can be used to retrieve details on deleted invoices > that the list of invoices omits. 
         * @summary Retrieve invoice
         * @param {InvoicesApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: InvoicesApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvoicesGetByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generates a CSV version for an invoice listing the associated rewards and orders 
         * @summary Retrieve invoice as CSV
         * @param {InvoicesApiGetCsvRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCsv(requestParameters: InvoicesApiGetCsvRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCsv(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generates a PDF version for an invoice 
         * @summary Retrieve invoice as PDF
         * @param {InvoicesApiGetPdfRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPdf(requestParameters: InvoicesApiGetPdfRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Uint8Array | File | buffer.File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPdf(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes an invoice. This has no further consequences but is a rather cosmetic operation. 
         * @summary Delete invoice
         * @param {InvoicesApiRemoveInvoiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeInvoice(requestParameters: InvoicesApiRemoveInvoiceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvoicesRemoveInvoiceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeInvoice(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InvoicesApi - factory interface
 * @export
 */
export const InvoicesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InvoicesApiFp(configuration)
    return {
        /**
         * Creating an invoice is the way for your organization to fund your account\'s balance.  1. Create an invoice 2. Pay the invoice 3. Funds get added to your account\'s balance  ## Request body  <div class=\"object-schema-request-schema\">   <table>   <thead>     <tr>       <th>Property</th>       <th>Type</th>       <th>Description</th>     </tr>   </thead>   <tbody class=\"object-schema-table-body\">     <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">po_number</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Reference to the purchase order number within your organization</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">amount</code> </div> </td><td><span class=\"property-type\">number</span> <span class=\"property-format\">double</span></td><td><p>Amount of the invoice in USD</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">memo</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>A note to be included in the invoice. This is for your internal use and will not be visible to the recipient.</p> </td></tr>   </tbody> </table>  </div>  
         * @summary Create invoice
         * @param {InvoicesApiCreateAndFundAccountBalanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndFundAccountBalance(requestParameters: InvoicesApiCreateAndFundAccountBalanceRequest, options?: AxiosRequestConfig): AxiosPromise<InvoicesCreateAndFundAccountBalanceResponse> {
            return localVarFp.createAndFundAccountBalance(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a list of all invoices on your account.  > ðŸš§ Deleted invoices are omitted > > The response does not include any previously deleted invoices. 
         * @summary List invoices
         * @param {InvoicesApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(requestParameters: InvoicesApiGetAllRequest = {}, options?: AxiosRequestConfig): AxiosPromise<InvoicesGetAllResponse> {
            return localVarFp.getAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve an invoice, identified by the given `id` in the URL  > ðŸ“˜ Deleted Invoices > > This endpoint can be used to retrieve details on deleted invoices > that the list of invoices omits. 
         * @summary Retrieve invoice
         * @param {InvoicesApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: InvoicesApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<InvoicesGetByIdResponse> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Generates a CSV version for an invoice listing the associated rewards and orders 
         * @summary Retrieve invoice as CSV
         * @param {InvoicesApiGetCsvRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCsv(requestParameters: InvoicesApiGetCsvRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getCsv(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Generates a PDF version for an invoice 
         * @summary Retrieve invoice as PDF
         * @param {InvoicesApiGetPdfRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPdf(requestParameters: InvoicesApiGetPdfRequest, options?: AxiosRequestConfig): AxiosPromise<Uint8Array | File | buffer.File> {
            return localVarFp.getPdf(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes an invoice. This has no further consequences but is a rather cosmetic operation. 
         * @summary Delete invoice
         * @param {InvoicesApiRemoveInvoiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeInvoice(requestParameters: InvoicesApiRemoveInvoiceRequest, options?: AxiosRequestConfig): AxiosPromise<InvoicesRemoveInvoiceResponse> {
            return localVarFp.removeInvoice(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createAndFundAccountBalance operation in InvoicesApi.
 * @export
 * @interface InvoicesApiCreateAndFundAccountBalanceRequest
 */
export type InvoicesApiCreateAndFundAccountBalanceRequest = {
    
} & InvoicesCreateAndFundAccountBalanceRequest

/**
 * Request parameters for getAll operation in InvoicesApi.
 * @export
 * @interface InvoicesApiGetAllRequest
 */
export type InvoicesApiGetAllRequest = {
    
    /**
    * Offsets the returned list by the given number of invoices. The returned invoices are ordered (and offsetted) by their creation date (DESC).
    * @type {number}
    * @memberof InvoicesApiGetAll
    */
    readonly offset?: number
    
    /**
    * Limits the number of invoices listed. The maximum and default value is 10.
    * @type {number}
    * @memberof InvoicesApiGetAll
    */
    readonly limit?: number
    
}

/**
 * Request parameters for getById operation in InvoicesApi.
 * @export
 * @interface InvoicesApiGetByIdRequest
 */
export type InvoicesApiGetByIdRequest = {
    
    /**
    * ID of the invoice that should be retrieved
    * @type {string}
    * @memberof InvoicesApiGetById
    */
    readonly id: string
    
}

/**
 * Request parameters for getCsv operation in InvoicesApi.
 * @export
 * @interface InvoicesApiGetCsvRequest
 */
export type InvoicesApiGetCsvRequest = {
    
    /**
    * ID of the Invoice for that the CSV should be generated
    * @type {string}
    * @memberof InvoicesApiGetCsv
    */
    readonly id: string
    
}

/**
 * Request parameters for getPdf operation in InvoicesApi.
 * @export
 * @interface InvoicesApiGetPdfRequest
 */
export type InvoicesApiGetPdfRequest = {
    
    /**
    * ID of the Invoice for that the PDF should be generated
    * @type {string}
    * @memberof InvoicesApiGetPdf
    */
    readonly id: string
    
}

/**
 * Request parameters for removeInvoice operation in InvoicesApi.
 * @export
 * @interface InvoicesApiRemoveInvoiceRequest
 */
export type InvoicesApiRemoveInvoiceRequest = {
    
    /**
    * ID of the invoice that should be retrieved
    * @type {string}
    * @memberof InvoicesApiRemoveInvoice
    */
    readonly id: string
    
}

/**
 * InvoicesApiGenerated - object-oriented interface
 * @export
 * @class InvoicesApiGenerated
 * @extends {BaseAPI}
 */
export class InvoicesApiGenerated extends BaseAPI {
    /**
     * Creating an invoice is the way for your organization to fund your account\'s balance.  1. Create an invoice 2. Pay the invoice 3. Funds get added to your account\'s balance  ## Request body  <div class=\"object-schema-request-schema\">   <table>   <thead>     <tr>       <th>Property</th>       <th>Type</th>       <th>Description</th>     </tr>   </thead>   <tbody class=\"object-schema-table-body\">     <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">po_number</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Reference to the purchase order number within your organization</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">amount</code> </div> </td><td><span class=\"property-type\">number</span> <span class=\"property-format\">double</span></td><td><p>Amount of the invoice in USD</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">memo</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>A note to be included in the invoice. This is for your internal use and will not be visible to the recipient.</p> </td></tr>   </tbody> </table>  </div>  
     * @summary Create invoice
     * @param {InvoicesApiCreateAndFundAccountBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApiGenerated
     */
    public createAndFundAccountBalance(requestParameters: InvoicesApiCreateAndFundAccountBalanceRequest, options?: AxiosRequestConfig) {
        return InvoicesApiFp(this.configuration).createAndFundAccountBalance(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch a list of all invoices on your account.  > ðŸš§ Deleted invoices are omitted > > The response does not include any previously deleted invoices. 
     * @summary List invoices
     * @param {InvoicesApiGetAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApiGenerated
     */
    public getAll(requestParameters: InvoicesApiGetAllRequest = {}, options?: AxiosRequestConfig) {
        return InvoicesApiFp(this.configuration).getAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve an invoice, identified by the given `id` in the URL  > ðŸ“˜ Deleted Invoices > > This endpoint can be used to retrieve details on deleted invoices > that the list of invoices omits. 
     * @summary Retrieve invoice
     * @param {InvoicesApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApiGenerated
     */
    public getById(requestParameters: InvoicesApiGetByIdRequest, options?: AxiosRequestConfig) {
        return InvoicesApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generates a CSV version for an invoice listing the associated rewards and orders 
     * @summary Retrieve invoice as CSV
     * @param {InvoicesApiGetCsvRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApiGenerated
     */
    public getCsv(requestParameters: InvoicesApiGetCsvRequest, options?: AxiosRequestConfig) {
        return InvoicesApiFp(this.configuration).getCsv(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generates a PDF version for an invoice 
     * @summary Retrieve invoice as PDF
     * @param {InvoicesApiGetPdfRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApiGenerated
     */
    public getPdf(requestParameters: InvoicesApiGetPdfRequest, options?: AxiosRequestConfig) {
        return InvoicesApiFp(this.configuration).getPdf(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes an invoice. This has no further consequences but is a rather cosmetic operation. 
     * @summary Delete invoice
     * @param {InvoicesApiRemoveInvoiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApiGenerated
     */
    public removeInvoice(requestParameters: InvoicesApiRemoveInvoiceRequest, options?: AxiosRequestConfig) {
        return InvoicesApiFp(this.configuration).removeInvoice(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
