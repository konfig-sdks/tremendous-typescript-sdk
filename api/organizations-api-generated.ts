/* tslint:disable */
/* eslint-disable */
/*
API Endpoints

Deliver monetary rewards and incentives to employees, customers, survey participants, and more through the Tremendous API. For organizational tasks, like managing your organization and it's members within Tremendous, please see the Tremendous Organizational API.

The version of the OpenAPI document: 2
Contact: developers@tremendous.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { OrganizationsCreateApiKey401Response } from '../models';
// @ts-ignore
import { OrganizationsCreateApiKey404Response } from '../models';
// @ts-ignore
import { OrganizationsCreateApiKey429Response } from '../models';
// @ts-ignore
import { OrganizationsCreateApiKey500Response } from '../models';
// @ts-ignore
import { OrganizationsCreateApiKeyResponse } from '../models';
// @ts-ignore
import { OrganizationsCreateNewOrganization400Response } from '../models';
// @ts-ignore
import { OrganizationsCreateNewOrganization401Response } from '../models';
// @ts-ignore
import { OrganizationsCreateNewOrganization429Response } from '../models';
// @ts-ignore
import { OrganizationsCreateNewOrganization500Response } from '../models';
// @ts-ignore
import { OrganizationsCreateNewOrganizationRequest } from '../models';
// @ts-ignore
import { OrganizationsCreateNewOrganizationRequestCopySettings } from '../models';
// @ts-ignore
import { OrganizationsCreateNewOrganizationResponse } from '../models';
// @ts-ignore
import { OrganizationsGetList401Response } from '../models';
// @ts-ignore
import { OrganizationsGetList429Response } from '../models';
// @ts-ignore
import { OrganizationsGetList500Response } from '../models';
// @ts-ignore
import { OrganizationsGetListResponse } from '../models';
// @ts-ignore
import { OrganizationsGetOrganization401Response } from '../models';
// @ts-ignore
import { OrganizationsGetOrganization404Response } from '../models';
// @ts-ignore
import { OrganizationsGetOrganization429Response } from '../models';
// @ts-ignore
import { OrganizationsGetOrganization500Response } from '../models';
// @ts-ignore
import { OrganizationsGetOrganizationResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * OrganizationsApi - axios parameter creator
 * @export
 */
export const OrganizationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new API key. The API key used to make the request will remain active.  Created API keys are generated randomly and returned in the response. **You cannot retrieve them again.** 
         * @summary Create API key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiKey: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organizations/create_api_key`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizations/create_api_key',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Organizations are a way to separate different parts of your business within the same Tremendous account.  You can assign users in your Tremendous team as members to any organization. Users can be members of multiple organizations at once.  API keys belong to a single organization. The API key used in a request determines on behalf of which organization the request is carried out.  **Important note:** When creating an organization, you are required to either pass `with_api_key` or `copy_settings[user]` in the request body as `true`. This ensures that your new Organization can either be accessed via the API or the Dashboard. 
         * @summary Create organization
         * @param {OrganizationsCreateNewOrganizationRequest} organizationsCreateNewOrganizationRequest Organization details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewOrganization: async (organizationsCreateNewOrganizationRequest: OrganizationsCreateNewOrganizationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationsCreateNewOrganizationRequest' is not null or undefined
            assertParamExists('createNewOrganization', 'organizationsCreateNewOrganizationRequest', organizationsCreateNewOrganizationRequest)
            const localVarPath = `/organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: organizationsCreateNewOrganizationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizations',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(organizationsCreateNewOrganizationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The returned list only includes the organization to which the API key belongs to, that is used for the request. 
         * @summary List organizations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve organization
         * @param {string} id ID of the organization to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganization: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOrganization', 'id', id)
            const localVarPath = `/organizations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizations/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationsApi - functional programming interface
 * @export
 */
export const OrganizationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganizationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new API key. The API key used to make the request will remain active.  Created API keys are generated randomly and returned in the response. **You cannot retrieve them again.** 
         * @summary Create API key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createApiKey(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationsCreateApiKeyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createApiKey(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Organizations are a way to separate different parts of your business within the same Tremendous account.  You can assign users in your Tremendous team as members to any organization. Users can be members of multiple organizations at once.  API keys belong to a single organization. The API key used in a request determines on behalf of which organization the request is carried out.  **Important note:** When creating an organization, you are required to either pass `with_api_key` or `copy_settings[user]` in the request body as `true`. This ensures that your new Organization can either be accessed via the API or the Dashboard. 
         * @summary Create organization
         * @param {OrganizationsApiCreateNewOrganizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewOrganization(requestParameters: OrganizationsApiCreateNewOrganizationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationsCreateNewOrganizationResponse>> {
            const organizationsCreateNewOrganizationRequest: OrganizationsCreateNewOrganizationRequest = {
                name: requestParameters.name,
                website: requestParameters.website,
                with_api_key: requestParameters.with_api_key,
                copy_settings: requestParameters.copy_settings,
                phone: requestParameters.phone
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewOrganization(organizationsCreateNewOrganizationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The returned list only includes the organization to which the API key belongs to, that is used for the request. 
         * @summary List organizations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationsGetListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve organization
         * @param {OrganizationsApiGetOrganizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganization(requestParameters: OrganizationsApiGetOrganizationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationsGetOrganizationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganization(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrganizationsApi - factory interface
 * @export
 */
export const OrganizationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganizationsApiFp(configuration)
    return {
        /**
         * Creates a new API key. The API key used to make the request will remain active.  Created API keys are generated randomly and returned in the response. **You cannot retrieve them again.** 
         * @summary Create API key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiKey(options?: AxiosRequestConfig): AxiosPromise<OrganizationsCreateApiKeyResponse> {
            return localVarFp.createApiKey(options).then((request) => request(axios, basePath));
        },
        /**
         * Organizations are a way to separate different parts of your business within the same Tremendous account.  You can assign users in your Tremendous team as members to any organization. Users can be members of multiple organizations at once.  API keys belong to a single organization. The API key used in a request determines on behalf of which organization the request is carried out.  **Important note:** When creating an organization, you are required to either pass `with_api_key` or `copy_settings[user]` in the request body as `true`. This ensures that your new Organization can either be accessed via the API or the Dashboard. 
         * @summary Create organization
         * @param {OrganizationsApiCreateNewOrganizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewOrganization(requestParameters: OrganizationsApiCreateNewOrganizationRequest, options?: AxiosRequestConfig): AxiosPromise<OrganizationsCreateNewOrganizationResponse> {
            return localVarFp.createNewOrganization(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * The returned list only includes the organization to which the API key belongs to, that is used for the request. 
         * @summary List organizations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(options?: AxiosRequestConfig): AxiosPromise<OrganizationsGetListResponse> {
            return localVarFp.getList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve organization
         * @param {OrganizationsApiGetOrganizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganization(requestParameters: OrganizationsApiGetOrganizationRequest, options?: AxiosRequestConfig): AxiosPromise<OrganizationsGetOrganizationResponse> {
            return localVarFp.getOrganization(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewOrganization operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiCreateNewOrganizationRequest
 */
export type OrganizationsApiCreateNewOrganizationRequest = {
    
} & OrganizationsCreateNewOrganizationRequest

/**
 * Request parameters for getOrganization operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiGetOrganizationRequest
 */
export type OrganizationsApiGetOrganizationRequest = {
    
    /**
    * ID of the organization to retrieve
    * @type {string}
    * @memberof OrganizationsApiGetOrganization
    */
    readonly id: string
    
}

/**
 * OrganizationsApiGenerated - object-oriented interface
 * @export
 * @class OrganizationsApiGenerated
 * @extends {BaseAPI}
 */
export class OrganizationsApiGenerated extends BaseAPI {
    /**
     * Creates a new API key. The API key used to make the request will remain active.  Created API keys are generated randomly and returned in the response. **You cannot retrieve them again.** 
     * @summary Create API key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiGenerated
     */
    public createApiKey(options?: AxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).createApiKey(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Organizations are a way to separate different parts of your business within the same Tremendous account.  You can assign users in your Tremendous team as members to any organization. Users can be members of multiple organizations at once.  API keys belong to a single organization. The API key used in a request determines on behalf of which organization the request is carried out.  **Important note:** When creating an organization, you are required to either pass `with_api_key` or `copy_settings[user]` in the request body as `true`. This ensures that your new Organization can either be accessed via the API or the Dashboard. 
     * @summary Create organization
     * @param {OrganizationsApiCreateNewOrganizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiGenerated
     */
    public createNewOrganization(requestParameters: OrganizationsApiCreateNewOrganizationRequest, options?: AxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).createNewOrganization(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The returned list only includes the organization to which the API key belongs to, that is used for the request. 
     * @summary List organizations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiGenerated
     */
    public getList(options?: AxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).getList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve organization
     * @param {OrganizationsApiGetOrganizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiGenerated
     */
    public getOrganization(requestParameters: OrganizationsApiGetOrganizationRequest, options?: AxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).getOrganization(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
