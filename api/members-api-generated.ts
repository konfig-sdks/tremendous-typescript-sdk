/* tslint:disable */
/* eslint-disable */
/*
API Endpoints

Deliver monetary rewards and incentives to employees, customers, survey participants, and more through the Tremendous API. For organizational tasks, like managing your organization and it's members within Tremendous, please see the Tremendous Organizational API.

The version of the OpenAPI document: 2
Contact: developers@tremendous.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { MembersCreateNewMember400Response } from '../models';
// @ts-ignore
import { MembersCreateNewMember401Response } from '../models';
// @ts-ignore
import { MembersCreateNewMember429Response } from '../models';
// @ts-ignore
import { MembersCreateNewMember500Response } from '../models';
// @ts-ignore
import { MembersCreateNewMemberRequest } from '../models';
// @ts-ignore
import { MembersCreateNewMemberResponse } from '../models';
// @ts-ignore
import { MembersGetMember401Response } from '../models';
// @ts-ignore
import { MembersGetMember404Response } from '../models';
// @ts-ignore
import { MembersGetMember429Response } from '../models';
// @ts-ignore
import { MembersGetMember500Response } from '../models';
// @ts-ignore
import { MembersGetMemberResponse } from '../models';
// @ts-ignore
import { MembersListMembers401Response } from '../models';
// @ts-ignore
import { MembersListMembers429Response } from '../models';
// @ts-ignore
import { MembersListMembers500Response } from '../models';
// @ts-ignore
import { MembersListMembersResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * MembersApi - axios parameter creator
 * @export
 */
export const MembersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Each organization has one or more users that can access and manage that organization. These users are called members.  Members can take actions via the Tremendous web dashboard directly. These actions include adding funding sources to the organization, creating Campaigns, and more.  ### Permissions  Members can have one of two roles that determine their permissions within the organization:  1. `MEMBER`: Limited permissions. Can view their own reward and order histories only. 2. `ADMIN`: Update organization settings, invite other members to the organization, and view all member order and reward histories within their organization.  To create members of a sub-organizations [create an API key for that organization](https://developers.tremendous.com/) first, then use the new API key in the create member request.  ### Inviting new members  After creating a member, an automatic invite is sent to the email address. If the user is not registered yet, that person will then need to sign up for a Tremendous account.  > ❗️ Automatic invitations are not available in the sandbox > > You must manually use the returned `invite_url` field in the payload instead. 
         * @summary Create member
         * @param {MembersCreateNewMemberRequest} membersCreateNewMemberRequest Member details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewMember: async (membersCreateNewMemberRequest: MembersCreateNewMemberRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'membersCreateNewMemberRequest' is not null or undefined
            assertParamExists('createNewMember', 'membersCreateNewMemberRequest', membersCreateNewMemberRequest)
            const localVarPath = `/members`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: membersCreateNewMemberRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(membersCreateNewMemberRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve member
         * @param {string} id ID of the member to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMember: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMember', 'id', id)
            const localVarPath = `/members/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * To list members of a sub-organization [create an API key for that organization](https://developers.tremendous.com/) first, then use the new API key in the list members request. 
         * @summary List members
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMembers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/members`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/members',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MembersApi - functional programming interface
 * @export
 */
export const MembersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MembersApiAxiosParamCreator(configuration)
    return {
        /**
         * Each organization has one or more users that can access and manage that organization. These users are called members.  Members can take actions via the Tremendous web dashboard directly. These actions include adding funding sources to the organization, creating Campaigns, and more.  ### Permissions  Members can have one of two roles that determine their permissions within the organization:  1. `MEMBER`: Limited permissions. Can view their own reward and order histories only. 2. `ADMIN`: Update organization settings, invite other members to the organization, and view all member order and reward histories within their organization.  To create members of a sub-organizations [create an API key for that organization](https://developers.tremendous.com/) first, then use the new API key in the create member request.  ### Inviting new members  After creating a member, an automatic invite is sent to the email address. If the user is not registered yet, that person will then need to sign up for a Tremendous account.  > ❗️ Automatic invitations are not available in the sandbox > > You must manually use the returned `invite_url` field in the payload instead. 
         * @summary Create member
         * @param {MembersApiCreateNewMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewMember(requestParameters: MembersApiCreateNewMemberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MembersCreateNewMemberResponse>> {
            const membersCreateNewMemberRequest: MembersCreateNewMemberRequest = {
                email: requestParameters.email,
                name: requestParameters.name,
                role: requestParameters.role
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewMember(membersCreateNewMemberRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve member
         * @param {MembersApiGetMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMember(requestParameters: MembersApiGetMemberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MembersGetMemberResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMember(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * To list members of a sub-organization [create an API key for that organization](https://developers.tremendous.com/) first, then use the new API key in the list members request. 
         * @summary List members
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMembers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MembersListMembersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMembers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MembersApi - factory interface
 * @export
 */
export const MembersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MembersApiFp(configuration)
    return {
        /**
         * Each organization has one or more users that can access and manage that organization. These users are called members.  Members can take actions via the Tremendous web dashboard directly. These actions include adding funding sources to the organization, creating Campaigns, and more.  ### Permissions  Members can have one of two roles that determine their permissions within the organization:  1. `MEMBER`: Limited permissions. Can view their own reward and order histories only. 2. `ADMIN`: Update organization settings, invite other members to the organization, and view all member order and reward histories within their organization.  To create members of a sub-organizations [create an API key for that organization](https://developers.tremendous.com/) first, then use the new API key in the create member request.  ### Inviting new members  After creating a member, an automatic invite is sent to the email address. If the user is not registered yet, that person will then need to sign up for a Tremendous account.  > ❗️ Automatic invitations are not available in the sandbox > > You must manually use the returned `invite_url` field in the payload instead. 
         * @summary Create member
         * @param {MembersApiCreateNewMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewMember(requestParameters: MembersApiCreateNewMemberRequest, options?: AxiosRequestConfig): AxiosPromise<MembersCreateNewMemberResponse> {
            return localVarFp.createNewMember(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve member
         * @param {MembersApiGetMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMember(requestParameters: MembersApiGetMemberRequest, options?: AxiosRequestConfig): AxiosPromise<MembersGetMemberResponse> {
            return localVarFp.getMember(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * To list members of a sub-organization [create an API key for that organization](https://developers.tremendous.com/) first, then use the new API key in the list members request. 
         * @summary List members
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMembers(options?: AxiosRequestConfig): AxiosPromise<MembersListMembersResponse> {
            return localVarFp.listMembers(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewMember operation in MembersApi.
 * @export
 * @interface MembersApiCreateNewMemberRequest
 */
export type MembersApiCreateNewMemberRequest = {
    
} & MembersCreateNewMemberRequest

/**
 * Request parameters for getMember operation in MembersApi.
 * @export
 * @interface MembersApiGetMemberRequest
 */
export type MembersApiGetMemberRequest = {
    
    /**
    * ID of the member to retrieve
    * @type {string}
    * @memberof MembersApiGetMember
    */
    readonly id: string
    
}

/**
 * MembersApiGenerated - object-oriented interface
 * @export
 * @class MembersApiGenerated
 * @extends {BaseAPI}
 */
export class MembersApiGenerated extends BaseAPI {
    /**
     * Each organization has one or more users that can access and manage that organization. These users are called members.  Members can take actions via the Tremendous web dashboard directly. These actions include adding funding sources to the organization, creating Campaigns, and more.  ### Permissions  Members can have one of two roles that determine their permissions within the organization:  1. `MEMBER`: Limited permissions. Can view their own reward and order histories only. 2. `ADMIN`: Update organization settings, invite other members to the organization, and view all member order and reward histories within their organization.  To create members of a sub-organizations [create an API key for that organization](https://developers.tremendous.com/) first, then use the new API key in the create member request.  ### Inviting new members  After creating a member, an automatic invite is sent to the email address. If the user is not registered yet, that person will then need to sign up for a Tremendous account.  > ❗️ Automatic invitations are not available in the sandbox > > You must manually use the returned `invite_url` field in the payload instead. 
     * @summary Create member
     * @param {MembersApiCreateNewMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApiGenerated
     */
    public createNewMember(requestParameters: MembersApiCreateNewMemberRequest, options?: AxiosRequestConfig) {
        return MembersApiFp(this.configuration).createNewMember(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve member
     * @param {MembersApiGetMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApiGenerated
     */
    public getMember(requestParameters: MembersApiGetMemberRequest, options?: AxiosRequestConfig) {
        return MembersApiFp(this.configuration).getMember(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * To list members of a sub-organization [create an API key for that organization](https://developers.tremendous.com/) first, then use the new API key in the list members request. 
     * @summary List members
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApiGenerated
     */
    public listMembers(options?: AxiosRequestConfig) {
        return MembersApiFp(this.configuration).listMembers(options).then((request) => request(this.axios, this.basePath));
    }
}
